<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shop.dao.MemberMapper">

	<sql id="dynamicSearch">
        <if test="searchType != null and keyword != null and keyword != ''">
            <choose>
                <when test="searchType == 'userName'">
                    AND INSTR(USER_NAME, #{keyword}) > 0
                </when>
                <when test="searchType == 'userId'">
                    AND INSTR(USER_ID, #{keyword}) > 0
                </when>
				<when test="searchType == 'userEmail'">
					AND INSTR(USER_EMAIL, #{keyword}) > 0
				</when>
            </choose>
        </if>
	</sql>
	
	<sql id="statusFilter">
	    <choose>
	        <when test="memberStatus == 'active'">
	            AND USE_FLAG = 'Y'
	        </when>
	        <when test="memberStatus == 'withdrawn'">
	            AND USE_FLAG = 'N'
	        </when>
	        <when test="memberStatus == 'all'">
	            <!-- 전체 조회시 조건 없음 -->
	        </when>
	        <otherwise>
	            AND USE_FLAG = 'Y'  <!-- 기본값: 정상회원만 -->
	        </otherwise>
	    </choose>
	</sql>
	
	<!-- 사용자: 로그인 -->
	 <select id="login" parameterType="String" resultType="com.shop.model.MemberVO">
		 SELECT USER_ID
 			, USER_PW
 			, USER_NAME
 			, USER_EMAIL
 			, ADMIN_CK
 			, MONEY
 			, POINT
 			, USE_FLAG 
		FROM MEMBER
		WHERE USER_ID = TRIM(#{userId})
	 </select>
	 
 	<!-- 사용자: 회원가입 등록 -->
	 <insert id="insert" parameterType="com.shop.model.MemberVO">
	 	INSERT INTO MEMBER
	 		(
	 			USER_ID
	 			, USER_PW
	 			, USER_NAME
	 			, USER_EMAIL
	 			, POST_NO
	 			, ADDR
	 			, ADDR_DETAIL
	 			, ADMIN_CK
	 			, REG_DATE
	 			, MONEY
	 			, POINT 
	 			, USE_FLAG
	 		)
	 		VALUES
	 		(
	 		 
		 		TRIM(#{user_id})
		 		, TRIM(#{user_pw})
		 		, TRIM(#{user_name})
		 		, TRIM(#{user_email})
		 		, #{post_no}
		 		, #{addr}
		 		, TRIM(#{addr_detail})
		 		, #{admin_ck}
		 		, sysdate
		 		, TRIM(#{money})
		 		, TRIM(#{point}) 
		 		, #{use_flag}
		 	)
	 </insert>
	 
	 <!-- 사용자: 회원 중복 확인 -->
	 <select id="memberIdChk" parameterType="String" resultType="Integer">
		 SELECT COUNT(*) 
		 FROM MEMBER
		 WHERE USER_ID = TRIM(#{userId})
	 </select>
	 
	<!-- 관리자: 회원 전체 수 조회 -->
    <select id="selectTotalCount" parameterType="com.shop.dto.MemberDto$MemberSearchRequest" resultType="Integer">
		SELECT COUNT(*) 
		FROM MEMBER
		WHERE 1=1
		<include refid="dynamicSearch" />
		<include refid="statusFilter" />
    </select>

    <!-- 관리자: 회원 리스트 조회 -->
    <select id="selectMemberList" parameterType="com.shop.dto.MemberDto$MemberSearchRequest" 
            resultType="com.shop.model.MemberVO">
	    SELECT A.*
	    FROM (
	        SELECT
	            ROW_NUMBER() OVER (ORDER BY REG_DATE DESC) AS RNUM,
	            USER_ID,
	            USER_NAME,
	            USER_EMAIL,
	            ADMIN_CK,
	            TO_CHAR(REG_DATE, 'YYYY-MM-DD') AS REG_DATE,
	            USE_FLAG
	        FROM MEMBER
	        WHERE 1=1
	        <include refid="dynamicSearch" />
	        <include refid="statusFilter" />
	    ) A
	    WHERE RNUM BETWEEN #{offset} AND #{limit}
    </select>
    
	<!-- 관리자: 회원 상세 조회 -->
    <select id="selectMemberDetail" parameterType="String" resultType="com.shop.model.MemberVO">
        SELECT 
            USER_ID,
            USER_NAME,
            USER_EMAIL,
            POST_NO,
            ADDR,
            ADDR_DETAIL,
            ADMIN_CK,
            TO_CHAR(REG_DATE, 'YYYY-MM-DD') AS REG_DATE,
            MONEY,
            POINT,
            USE_FLAG
        FROM MEMBER
        WHERE USER_ID = #{userId}
    </select>
    
    <!-- 관리자: 회원 정보 수정 -->
	<update id="updateMember" parameterType="com.shop.model.MemberVO">
	    UPDATE MEMBER 
	    SET USER_NAME = #{user_name},
	        USER_EMAIL = #{user_email},
	        POST_NO = #{post_no},
	        ADDR = #{addr},
	        ADDR_DETAIL = #{addr_detail},
	        MONEY = #{money},
	        POINT = #{point},
	        USE_FLAG = #{use_flag},
	        ADMIN_CK = #{admin_ck}
	    WHERE USER_ID = #{user_id}
	</update>
	
	<!-- 관리자: 회원 정보 수정 이메일 중복 체크 (본인 제외) -->
	<select id="checkDuplicateEmailForUpdate" resultType="int">
	    SELECT COUNT(*) 
	    FROM MEMBER
	    WHERE USER_EMAIL = #{email}
	    AND USER_ID != #{userId}
	    AND USE_FLAG = 'Y'
	</select>
	
	<!-- 관리자: 회원 가입 이메일 중복 체크 -->
	<select id="checkDuplicateEmailForRegister" resultType="int">
	    SELECT COUNT(*)
	    FROM MEMBER
	    WHERE USER_EMAIL = #{email}
	    AND USE_FLAG = 'Y'
	</select>
    
    <!-- 관리자: 회원 탈퇴 처리 (논리적 삭제) -->
    <update id="deleteMember" parameterType="String">
        UPDATE MEMBER 
        SET USE_FLAG = 'N'
        WHERE USER_ID = #{userId}
    </update>
</mapper>